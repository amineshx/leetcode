# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def doubleIt(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Reverse the linked list to make handling easier
        reversed_head = self.reverse(head)
        
        current = reversed_head
        carry = 0

        # Traverse the reversed linked list
        while current:
            # Double the value and add the carry
            doubled_val = current.val * 2 + carry
            # Calculate the new value and carry
            current.val = doubled_val % 10
            carry = doubled_val // 10
            # Move to the next node
            current = current.next

        # If there's a carry after the traversal, add a new node for it
        if carry > 0:
            new_node = ListNode(carry)
            current = reversed_head
            while current.next:
                current = current.next
            current.next = new_node

        # Reverse the linked list back to its original order
        return self.reverse(reversed_head)

    def reverse(self, head: Optional[ListNode]) -> Optional[ListNode]:
        prev = None
        current = head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        return prev
