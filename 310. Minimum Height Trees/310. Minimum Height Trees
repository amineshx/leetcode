from collections import defaultdict, deque
from typing import List

class Solution:
    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:
        if n == 1:
            return [0]  # Single node tree

        # Create an adjacency list representation of the graph
        adjacency = defaultdict(list)
        degrees = [0] * n
        for u, v in edges:
            adjacency[u].append(v)
            adjacency[v].append(u)
            degrees[u] += 1
            degrees[v] += 1

        # Perform BFS starting from the leaves
        leaves = deque()
        for i in range(n):
            if degrees[i] == 1:  # A node with only one edge is a leaf
                leaves.append(i)

        remaining_nodes = n
        while remaining_nodes > 2:
            num_leaves = len(leaves)
            remaining_nodes -= num_leaves
            for _ in range(num_leaves):
                leaf = leaves.popleft()
                for neighbor in adjacency[leaf]:
                    degrees[neighbor] -= 1
                    if degrees[neighbor] == 1:
                        leaves.append(neighbor)

        # Return the remaining nodes which are the roots of the minimum height trees
        return list(leaves)
